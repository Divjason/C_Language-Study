*문자형
> ASCII Chart
> 컴퓨터는 내부적으로 문자 => 숫자로 바꿔서 인식
> 결국 문자도 이진수로 바꿔서 저장하고 처리할 수 밖에 없기 때문에
> 내부적으로 문자형으로 정수처럼 처리하기 때문에, 문자형도 결국 정수형의 일부인것처럼 인식!!!
> cppreference ascii table
> https://en.cppreference.com/w/cpp/language/ascii.html

*부동소수점형
> Floating-Point Types
> Scientific Notations = 과학적 표기법 => 과학이나 공학분야에서 정말 큰 숫자를 다뤄야할 때, 보다 쉽게 이해하려고 만든 표기법
> 동일한 숫자도 표기방법을 다르게 해서 표현!!!
> 123.45 = 12345 X 10^-2 = 1.2345 X 10^2

> 10^n => n : exponent
> m x 10^n => m : significand

float 자료형을 저장할 수 있는 변수는 반드시 float 선언!
해당 변수 안에 입력되어야 할 값을 표기할 때에는 반드시 f를 입력해주는 것이 문법적으로 맞다!!!

*부동소수점 한계
1) 너무 큰 숫자와 상대적으로 너무 작은 숫자를 연산하게 될 경우, 그 작은 숫자가 사라짐 => 내부구조 한계

2) 0.01이라는 값을 입력했을 때, 정확하게 0.01값을 가져가지 못함=> 오차범위 존재 => 누적 => 1.00의 값을 가져가지 못하는 한계

3) 부동소수표현식 => 매크로 형식으로 사용하는 방법

4) 수용할 수 있는 값을 초과하는 overflow 현상이 발생했을 때, 출력할 수 있는 정도까지만 값을 출력할 수도 있지만, 그렇게 하지않고, inf => 너무 큰 값 이라는 출력 // 연산중단

5) 부동소수점의 정밀도로는 도저히 표현할 수 없는 값에 도달하게 되면, 0의 값으로 수렴 출력

불리언형 = Boolean = 논리형
> True / False

문자열 => 여러개의 문자로 구성
